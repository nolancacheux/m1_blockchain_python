# -----------------------------------------------------------
# IMPORTATIONS ET CONFIGURATION INITIALE DU RÉSEAU BLOCKCHAIN
# -----------------------------------------------------------

# Importation de la classe BlockchainNode depuis le module 'node'
# BlockchainNode représente un nœud du réseau blockchain qui va valider, stocker et diffuser les certificats.
from node import BlockchainNode  

# Importation du module Node depuis 'network'
# Ce module contient des fonctions de gestion du réseau blockchain, notamment pour réinitialiser l'état du réseau.
from network import Node  

# Importation de la classe Wallet depuis le module 'wallet'
# Wallet gère les paires de clés (publique/privée) et sert à signer les certificats, garantissant l'authenticité des opérations.
from wallet import Wallet  

# Importation de la classe ProofOfStake depuis le module 'proof_of_stake'
# ProofOfStake implémente le mécanisme de consensus par preuve d'enjeu, assurant la sécurité et la validation des blocs.
from proof_of_stake import ProofOfStake  

#proof of stake est un mécanisme de consensus qui permet de déterminer quel nœud valide les blocs et d'assurer la sécurité du réseau.
# how it works:  the creator of a new block is chosen in a deterministic way, depending on its wealth, also defined as stake.
# the more coins (or tokens) the creator owns, the more likely it is to be chosen to create a new block.


# -----------------------------------------------------------
# CRÉATION DES WALLETS POUR LES NŒUDS ET LES UTILISATEURS
# -----------------------------------------------------------

# Création de trois wallets qui serviront aux nœuds du réseau.
# Ces wallets sont utilisés pour signer et valider les certificats des blocs sur le réseau.
walletNode1 = Wallet()  # Wallet du premier nœud (utilisé également pour initier le ProofOfStake)
walletNode2 = Wallet()  # Wallet du deuxième nœud
walletNode3 = Wallet()  # Wallet du troisième nœud

# Création de deux wallets pour les utilisateurs finaux qui interagiront avec le smart contract NFT.
walletAlice = Wallet()  # Représente l'utilisateur Alice, qui va déployer le smart contract et initier des opérations
walletBob = Wallet()    # Représente l'utilisateur Bob, qui va participer (par exemple, en mintant ou transférant des NFT)

# Regroupement des wallets utilisateurs dans un dictionnaire pour un accès plus simple par leur nom.
WALLETS = {
    "Alice": walletAlice,
    "Bob": walletBob
}

# -----------------------------------------------------------
# CONFIGURATION DU MECHANISME DE CONSENSUS (PROOF OF STAKE)
# -----------------------------------------------------------

# Initialisation du mécanisme de Proof of Stake avec la clé publique du premier wallet de nœud.
# Ce mécanisme permettra de déterminer quel nœud valide les blocs et d'assurer la sécurité du réseau.
pos = ProofOfStake(walletNode1.publicKey)

# -----------------------------------------------------------
# FONCTION DE RÉINITIALISATION DU RÉSEAU BLOCKCHAIN
# -----------------------------------------------------------

# Définition d'une fonction qui remet à zéro le réseau blockchain et recrée les nœuds.
# Ceci est essentiel pour repartir sur une base propre lors de tests ou de simulations.
def reset_blockchain():
    Node.reset_network()  # Appel de la méthode pour effacer l'état actuel du réseau (tous les blocs et certificats sont supprimés)
    # Déclaration des variables node1, node2 et node3 en tant que globales, pour pouvoir y accéder partout dans le notebook.
    global node1, node2, node3  
    # Création de trois instances de BlockchainNode, chacune associée à un wallet de nœud et au mécanisme ProofOfStake.
    node1 = BlockchainNode(walletNode1, pos)  # Premier nœud avec son wallet et PoS
    node2 = BlockchainNode(walletNode2, pos)  # Deuxième nœud
    node3 = BlockchainNode(walletNode3, pos)  # Troisième nœud

# -----------------------------------------------------------
# IMPORTATION DE MODULES SUPPLÉMENTAIRES POUR LA SIMULATION
# -----------------------------------------------------------

# Importation du module time pour pouvoir introduire des délais (utile pour tester des contraintes temporelles sur le mint)
import time

# Importation de la classe Certificate depuis 'certificate'
# Certificate servira à créer des certificats de diverses opérations (déploiement, mint, transfert)
from certificate import Certificate

# Importation d'un helper pour obtenir un timestamp actuel.
# Le timestamp est crucial pour valider que les opérations se déroulent dans les fenêtres temporelles prévues.
from helpers import timestamp

# Importation du smart contract NFT lui-même depuis le module 'smart_contracts.nft'
# Ce smart contract contient toute la logique métier pour la gestion des NFT (création, transfert, etc.)
from smart_contracts.nft import SmartContract

# Importation des classes SmartContractDefinition et SmartContractWritingOperation depuis 'smart_contract'
# Ces classes permettent de définir le déploiement du smart contract et d’enregistrer des opérations qui le modifient.
from smart_contract import SmartContractDefinition, SmartContractWritingOperation

# -----------------------------------------------------------
# RÉINITIALISATION DE LA BLOCKCHAIN POUR DÉMARRER UNE SIMULATION PROPRE
# -----------------------------------------------------------

# Appel de la fonction reset_blockchain() pour repartir sur une blockchain vide.
reset_blockchain()

# -----------------------------------------------------------
# DÉPLOIEMENT DU SMART CONTRACT NFT
# -----------------------------------------------------------

# Création de la définition du smart contract NFT.
# read_text_file est utilisé pour lire le code source du smart contract depuis le fichier 'smart_contracts/nft.py'.
# La liste d'arguments passée permet de paramétrer le contrat :
# "NFT" correspond au nom de la collection, timestamp.now() est le début du mint,
# 10 est le nombre maximum de NFT et 20000 la durée pendant laquelle le mint est autorisé (en ms).
smartContractDefinition = SmartContractDefinition(
    walletAlice.publicKey,                      # La clé publique d'Alice, qui déploie le contrat (son identité est signée)
    read_text_file('smart_contracts/nft.py'),     # Lecture du code source du smart contract (assurant l'intégrité du déploiement)
    ["NFT", timestamp.now(), 10, 20000 ]         # Arguments pour initialiser le contrat : nom, début, limite, durée de mint
)
# Alice signe la définition du smart contract pour garantir son authenticité sur la blockchain.
walletAlice.sign(smartContractDefinition)

# -----------------------------------------------------------
# CRÉATION DES OPÉRATIONS DE MINT POUR LES UTILISATEURS
# -----------------------------------------------------------

# Création d'une opération de mint pour Alice à l'aide de la méthode statique mint_certificate.
# Cette opération indique qu'Alice souhaite créer un NFT sur le contrat.
aliceMintOperation = SmartContract.mint_certificate(walletAlice.publicKey, smartContractDefinition)
# Alice signe son opération de mint pour authentifier sa demande.
walletAlice.sign(aliceMintOperation)
  
# Création d'une opération de mint similaire pour Bob.
bobMintOperation = SmartContract.mint_certificate(walletBob.publicKey, smartContractDefinition)
# Bob signe sa propre opération, assurant ainsi que la demande provient bien de lui.
walletBob.sign(bobMintOperation)

# -----------------------------------------------------------
# ENREGISTREMENT DES CERTIFICATS DANS LE RÉSEAU
# -----------------------------------------------------------

# On enregistre la définition du smart contract et les opérations de mint sur le nœud node1.
# Ces certificats seront ensuite inclus dans les blocs de la blockchain.
node1.new_certificate(smartContractDefinition)  # Enregistrement du déploiement du contrat
node1.new_certificate(aliceMintOperation)         # Enregistrement de la demande de mint d'Alice
node1.new_certificate(bobMintOperation)           # Enregistrement de la demande de mint de Bob

# -----------------------------------------------------------
# SIMULATION D'UN DÉLAI POUR TESTER LES CONTRAINTES TEMPORELLES
# -----------------------------------------------------------

# Pause d'une durée de 0.4 seconde pour simuler un délai.
# Pourquoi ? Pour vérifier que le mint n'est autorisé que dans une fenêtre temporelle précise.
time.sleep(0.4)

# Après la pause, Alice effectue une nouvelle opération de mint.
aliceMintOperation = SmartContract.mint_certificate(walletAlice.publicKey, smartContractDefinition)
walletAlice.sign(aliceMintOperation)  # Signature d'Alice pour authentifier cette nouvelle demande
node1.new_certificate(aliceMintOperation)  # Enregistrement de l'opération sur le nœud

# -----------------------------------------------------------
# SIMULATION D'UNE ACTIVITÉ SUPPLÉMENTAIRE SUR LA BLOCKCHAIN
# -----------------------------------------------------------

# Boucle pour générer et enregistrer 10 certificats génériques.
# Cela simule une activité sur la blockchain, qui peut influencer l'ordre temporel des opérations.
for i in range(10):
    certificate = Certificate(walletAlice.publicKey)  # Création d'un certificat générique avec la clé d'Alice
    walletAlice.sign(certificate)  # Signature pour authentifier le certificat
    node1.new_certificate(certificate)  # Ajout du certificat au nœud node1

# -----------------------------------------------------------
# RECONSTITUTION DE L'ÉTAT ACTUEL DU SMART CONTRACT
# -----------------------------------------------------------

# À partir de la blockchain du nœud node2, on reconstitue l'état actuel du smart contract.
# Cela se fait en parcourant tous les certificats (déploiement et opérations) et en appliquant les modifications.
smartContractObject = SmartContractDefinition.get_smart_contract_at_current_state(
    node2.blockchain,                         # On utilise la blockchain associée au nœud node2 pour la lecture
    smartContractDefinition.hash()            # On identifie le contrat à reconstituer grâce à son hash unique
)
# Affichage de l'état du smart contract, qui montre par exemple les NFT créés et leurs propriétaires.
smartContractObject.display()

# -----------------------------------------------------------
# SIMULATION D'OPÉRATIONS DE TRANSFERT DE NFT
# -----------------------------------------------------------

# Création d'une opération de transfert où Bob transfère le NFT identifié par token_id 2 à Alice.
# Cette opération sera enregistrée et appliquée pour modifier la propriété du NFT.
bobTransferOperation = SmartContract.transfer_certificate(
    walletBob.publicKey,          # Bob, initiateur du transfert, est identifié par sa clé publique
    smartContractDefinition,      # Le transfert concerne le smart contract défini précédemment
    walletAlice.publicKey,        # Le NFT doit être transféré à Alice, identifiée par sa clé publique
    2                             # L'identifiant du NFT à transférer
)
# Dans un cas particulier, Alice signe également l'opération, ce qui peut être nécessaire pour autoriser le transfert.
walletAlice.sign(bobTransferOperation)
# Enregistrement de l'opération de transfert sur le nœud node2.
node2.new_certificate(bobTransferOperation)

# Cas de test : Création d'une opération où Bob tente de transférer le NFT à lui-même.
# Cela sert à vérifier que le système empêche les transferts inutiles ou erronés.
bobTransferOperation = SmartContract.transfer_certificate(
    walletBob.publicKey,
    smartContractDefinition,
    walletBob.publicKey,  # Ici, le transfert est vers lui-même (mauvaise opération)
    2
)
walletBob.sign(bobTransferOperation)
node2.new_certificate(bobTransferOperation)

# Nouvelle opération de transfert : Bob transfère à nouveau le NFT (token 2) à Alice.
bobTransferOperation = SmartContract.transfer_certificate(
    walletBob.publicKey,
    smartContractDefinition,
    walletAlice.publicKey,
    2
)
walletBob.sign(bobTransferOperation)
node2.new_certificate(bobTransferOperation)

# -----------------------------------------------------------
# SIMULATION SUPPLÉMENTAIRE D'ACTIVITÉ SUR LA BLOCKCHAIN
# -----------------------------------------------------------

# Boucle pour enregistrer 10 certificats supplémentaires sur le nœud node1,
# simulant une activité continue sur le réseau qui pourrait influencer l'ordre temporel.
for i in range(10):
    certificate = Certificate(walletAlice.publicKey)
    walletAlice.sign(certificate)
    node1.new_certificate(certificate)

# -----------------------------------------------------------
# RECONSTITUTION FINALE DE L'ÉTAT DU SMART CONTRACT
# -----------------------------------------------------------

# Reconstitution finale de l'état du smart contract à partir de la blockchain du nœud node2,
# afin de voir l'effet cumulatif de toutes les opérations (mint et transferts).
smartContractObject: SmartContract = SmartContractDefinition.get_smart_contract_at_current_state(
    node2.blockchain,
    smartContractDefinition.hash()
)
# Affichage final de l'état du contrat pour vérifier que toutes les modifications ont été correctement appliquées.
smartContractObject.display()

# -----------------------------------------------------------
# FONCTION UTILITAIRE POUR UN AFFICHAGE LISIBLE DU TEMPS
# -----------------------------------------------------------

# Importation des classes datetime et timedelta pour la manipulation et le formatage des dates.
from datetime import datetime, timedelta

# Définition d'une fonction humanize_time() qui convertit un timestamp en millisecondes
# en une chaîne lisible (par exemple "30 seconds ago" ou "2 hours ago").
# Dans le contexte blockchain, il est souvent nécessaire d'interpréter les temps des transactions.
def humanize_time(timestamp_ms):
    # Conversion du timestamp en un objet datetime.
    # On divise par 1000 car le timestamp est fourni en millisecondes et datetime travaille en secondes.
    timestamp = datetime.fromtimestamp(timestamp_ms / 1000)
    now = datetime.now()  # Récupère l'heure actuelle pour effectuer la comparaison.
    diff = now - timestamp  # Calcule la différence entre l'heure actuelle et le timestamp de l'événement.

    # Si diff est négatif, le timestamp est dans le futur : on ajuste pour afficher "in X seconds/minutes..."
    if diff.total_seconds() < 0:
        diff = abs(diff)  # On prend la valeur absolue pour obtenir une durée positive.
        suffix = "in "  # Suffixe indiquant un événement futur.
    else:
        suffix = ""  # Aucun suffixe pour un événement passé, on pourra ajouter "ago" dans l'affichage.
    
    # Selon la durée écoulée, on formate l'affichage en secondes, minutes, heures ou jours.
    if diff < timedelta(seconds=60):
        # Pour une durée inférieure à 60 secondes, on retourne le nombre de secondes.
        return f"{suffix}{int(diff.total_seconds())} seconds ago" if not suffix else f"{suffix}{int(diff.total_seconds())} seconds"
    elif diff < timedelta(minutes=60):
        # Pour une durée inférieure à 60 minutes, on convertit en minutes.
        return f"{suffix}{int(diff.total_seconds() / 60)} minutes ago" if not suffix else f"{suffix}{int(diff.total_seconds() / 60)} minutes"
    elif diff < timedelta(hours=24):
        # Pour une durée inférieure à 24 heures, on convertit en heures.
        return f"{suffix}{int(diff.total_seconds() / 3600)} hours ago" if not suffix else f"{suffix}{int(diff.total_seconds() / 3600)} hours"
    elif diff < timedelta(days=7):
        # Pour une durée inférieure à 7 jours, on convertit en jours.
        return f"{suffix}{int(diff.total_seconds() / 86400)} days ago" if not suffix else f"{suffix}{int(diff.total_seconds() / 86400)} days"
    else:
        # Pour des durées supérieures à 7 jours, on retourne la date au format standard YYYY-MM-DD.
        return timestamp.strftime("%Y-%m-%d")
